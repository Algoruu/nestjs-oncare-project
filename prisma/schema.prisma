generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id          Int            @id @default(autoincrement())
  email       String
  name        String
  password    String
  role        Role
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?

  // Relations
  socialAccounts    SocialAccount[]
  managedCareWorkers ManageMember[]  @relation("SocialWorkerToCareWorkers")
  managedBySocialWorker ManageMember[]  @relation("CareWorkerToSocialWorker")
  works             Work[]
  journals          Journal[]       @relation("CareWorkerJournals")
  notifications     Notification[]
  reportsAsCSocialWorker Report[]     @relation("Reports_SocialWorker")
  reportsAsCareWorker  Report[]     @relation("Reports_CareWorker")
  clients           Client[]        @relation("CareWorkerClients")
  initialClients    Client[]        @relation("SocialWorkerClients")
}

model ManageMember {
  id             Int    @id
  socialWorkerId Int
  careWorker     Member @relation("CareWorkerToSocialWorker", fields: [id], references: [id])
  socialWorker   Member @relation("SocialWorkerToCareWorkers", fields: [socialWorkerId], references: [id])
}

model SocialAccount {
  id         Int            @id @default(autoincrement())
  memberId   Int
  platform   SocialPlatform
  platformId String
  createdAt  DateTime       @default(now())
  member     Member         @relation(fields: [memberId], references: [id])

  @@unique([platform, platformId])
}

model Client {
  id              Int       @id @default(autoincrement())
  name            String
  birthDate       DateTime   @db.Date
  gender          String
  planningTime    String
  address         String?
  contact         String?
  guardianContact String?
  careWorkerId    Int?
  socialWorkerId  Int
  notes           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  careWorker      Member?      @relation("CareWorkerClients", fields: [careWorkerId], references: [id], onDelete: Cascade)
  journals        Journal[]
  socialWorker    Member       @relation("SocialWorkerClients", fields: [socialWorkerId], references: [id], onDelete: Cascade)
}

model Work {
  id          Int       @id @default(autoincrement())
  memberId    Int
  workDate    DateTime  @db.Date
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  member      Member    @relation(fields: [memberId], references: [id])
  events      WorkEvent[]
}

model WorkEvent {
  id        Int           @id @default(autoincrement())
  workId    Int
  type      WorkEventType
  time      DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  work      Work          @relation(fields: [workId], references: [id])

  @@index([workId])
}

model Journal {
  id              Int      @id @default(autoincrement())
  careWorkerId    Int
  clientId        Int
  rawAudioUrl     String
  transcript      String
  editedTranscript String? 
  summary         String?
  recommendations String?
  opinion         String?
  result          String?
  note            String?
  exportedPdf     String?
  exportedDocx    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  issues          String?  @db.VarChar
  careWorker      Member   @relation("CareWorkerJournals", fields: [careWorkerId], references: [id])
  client          Client   @relation(fields: [clientId], references: [id])
}

model Report {
  id             Int      @id @default(autoincrement())
  socialWorkerId Int
  periodStart    DateTime
  periodEnd      DateTime
  careWorkerId   Int
  content        String
  exported       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  careWorker     Member   @relation("Reports_CareWorker", fields: [careWorkerId], references: [id])
  socialWorker   Member   @relation("Reports_SocialWorker", fields: [socialWorkerId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  memberId  Int
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member   @relation(fields: [memberId], references: [id])
}

enum Role {
  careWorker
  socialWorker
}

enum SocialPlatform {
  KAKAO
  GOOGLE
  NAVER
}

enum WorkEventType {
  CLOCK_IN
  CLOCK_OUT
}
