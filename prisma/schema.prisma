generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  careWorker
  caseManager
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  userName     String
  passwordHash String
  phone        String
  role         Role
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  clients            Client[]       @relation("CareWorkerClients")
  careWorkerJournals Journal[]      @relation("CareWorkerJournals")
  notifications      Notification[]
  careWorkerInfo     CareWorker?    @relation("CareWorkerUser")
  managedCareWorkers CareWorker[]   @relation("CaseManagerCareWorkers")
  workShifts         WorkShift[]    @relation("CareWorkerWorkShifts")
  reportsAsCaseManager Report[]     @relation("Reports_CaseManager")
  reportsAsCareWorker  Report[]     @relation("Reports_CareWorker")
}

model Client {
  id              Int        @id @default(autoincrement())
  name            String
  birthDate       DateTime
  gender          String
  address         String?
  contact         String?
  guardianContact String?
  careWorkerId    Int
  notes           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  careWorker      User       @relation("CareWorkerClients", fields: [careWorkerId], references: [id])
  journals        Journal[]
  reports         Report[]
  workShifts      WorkShift[]
}

model Journal {
  id              Int       @id @default(autoincrement())
  clientId        Int
  careWorkerId    Int
  rawAudioUrl     String
  transcript      String
  summary         String?
  issues          String?
  recommendations String?
  opinion         String?
  result          String?
  note            String?
  exportedPdf     String?
  exportedDocx    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  client          Client    @relation(fields: [clientId], references: [id])
  careWorker      User      @relation("CareWorkerJournals", fields: [careWorkerId], references: [id])
}

model Report {
  id            Int      @id @default(autoincrement())
  caseManagerId Int
  periodStart   DateTime
  periodEnd     DateTime
  clientId      Int
  careWorkerId  Int
  content       String
  exported      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  caseManager   User     @relation("Reports_CaseManager", fields: [caseManagerId], references: [id])
  client        Client   @relation(fields: [clientId], references: [id])
  careWorker    User     @relation("Reports_CareWorker", fields: [careWorkerId], references: [id])
}

model CareWorker {
  id            Int     @id                // User.id (role: careWorker)
  caseManagerId Int
  user          User    @relation("CareWorkerUser", fields: [id], references: [id])
  caseManager   User    @relation("CaseManagerCareWorkers", fields: [caseManagerId], references: [id])
}

model WorkShift {
  id           Int       @id @default(autoincrement())
  careWorkerId Int
  clientId     Int
  startTime    DateTime
  endTime      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  careWorker   User      @relation("CareWorkerWorkShifts", fields: [careWorkerId], references: [id])
  client       Client    @relation(fields: [clientId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}