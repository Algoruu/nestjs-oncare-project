name: Deploy to Amazon ECS

on:
  push:
    branches:
      - 'prod'

env:
  AWS_REGION: ap-northeast-2
  NEST_ECR_REPOSITORY: oncare
  PYTHON_ECR_REPOSITORY: oncare-python
  ECS_SERVICE: oncare-service
  ECS_CLUSTER: oncare
  ECS_TASK_DEFINITION: .aws/task-definition.json
  NEST_CONTAINER_NAME: oncare
  PYTHON_CONTAINER_NAME: whisper
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push NestJS image
        id: build-nest-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -f ./Dockerfile.nest -t $ECR_REGISTRY/${{ env.NEST_ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.NEST_ECR_REPOSITORY }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/${{ env.NEST_ECR_REPOSITORY }}:$IMAGE_TAG"

      - name: Build, tag, and push FastAPI image
        id: build-python-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -f ./Dockerfile.python -t $ECR_REGISTRY/${{ env.PYTHON_ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.PYTHON_ECR_REPOSITORY }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/${{ env.PYTHON_ECR_REPOSITORY }}:$IMAGE_TAG"

      - name: Fill in NestJS image in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.NEST_CONTAINER_NAME }}
          image: ${{ steps.build-nest-image.outputs.image }}
          environment-variables: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
            OPENAI_API_KEY =${{ secrets.OPENAI_API_KEY }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_REGION=${{ env.AWS_REGION }}

      - name: Update Python container image in task definition
        run: |
          jq '.containerDefinitions |= map(
            if .name == "${{ env.PYTHON_CONTAINER_NAME }}"
            then .image = "${{ steps.build-python-image.outputs.image }}"
            else .
          end)' ${{ steps.task-def.outputs.task-definition }} > updated-task-def.json

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: updated-task-def.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
